invinsible(5)
invisible(5)
library(datasets)
data(iris)
?iris
head(iris)
?split
split(iris, species = virginia)
split(iris, species = "virginia"")
lapply(split(iris, Species), mean)
lapply(split(iris$Species), mean)
lapply(split(iris,iris$Species), mean)
?mean
lapply(split(iris,iris$Species), mean, na.rm=TRUE)
spec <- split(iris,iris$Species)
spec
mean(spec)
mean(spec[,1])
mean(spec[[,1]])
mean(spec$Sepal.length)
lapply(spec, function(x) colmeans(x[, c(,"Sepal.Length" ,"Sepal.Width" ,"Petal.Length","Petal.Width")]))
lapply(spec, function(x) colMeans(x[, c(,"Sepal.Length" ,"Sepal.Width" ,"Petal.Length","Petal.Width")]))
lapply(spec, function(x) colMeans(x[, c("Sepal.Length" ,"Sepal.Width" ,"Petal.Length","Petal.Width")]))
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
colMeans(iris)
apply(iris, 1, mean)
library(datasets)
data(mtcars)
?mtcars
apply(mtcars, 2, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(cyl, hp, avg))
?avg
?average
with(mtcars, tapply(cyl, hp, mean))
with(mtcars, tapply(hp, cyl, mean))
82.63636-209.21429
debug(ls)
ls
ls
debug(ls)
ls
?ls
debug(ls)
ls()
1
2
15
q
q
exit
q
q
wfsd
quit
1
0
2
3
4
5
6
q
str(iris)
str(mtcars)
install.packages("RMySql")
install.packages("RMySQL")
install.packages("DBI")
library("DBI")
dbi
?d
?DBI
download.file(url="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", method="curl", destfile="acs.csv")
acs <- read.csv("acs.csv", header=TRUE)
dim(acs)
head(acs)
head(acs$11)
head([acs$11])
head([acs$acs])
head([[acs$acs]])
acs$11
acs$ACR
head(acs$ACR)
?as.logical
agricultureLogical <- as.logical(acs$ACR = 6 & acs§AGS = 6)
agricultureLogical <- as.logical(acs$ACR == 6 & acs§AGS == 6)
agricultureLogical <- as.logical(acs$ACR = "6" & acs§AGS = "6")
agricultureLogical <- as.logical(acs[(acs$ACR = 6 & acs§AGS = 6)])
agricultureLogical <- as.logical(acs[(acs$ACR = 6 & acs$AGS = 6)])
acs[acs$ACR = 6]
acs[(acs$ACR = 6)]
acs[(acs$ACR = 6 & acs$AGS)]
acs$AGS
acs[(acs$AGS = 6)]
head(acs[(acs$AGS = 6)])
agricultureLogical <- as.logical(acs[(acs$ACR = 6 & acs$AGS = 6),])
acs[(acs$ACR = 6 & acs$AGS),]
acs[(acs$ACR = 6 & acs$AGS = 6),]
str(acs)
acs <- read.csv("acs.csv", header=TRUE)
str(acs)
agricultureLogical <- as.logical(acs[(acs$ACR = 3 & acs$AGS = 6),])
str(acs)
acs$ACR
acs$AGS
agricultureLogical <- acs[(acs$ACR = 3 & acs$AGS = 6)]
agricultureLogical <- acs[(acs$ACR = 3 & acs$AGS = 6),]
str(acs)
acs[(acs$ACR = 3 & acs$AGS = 6),]
acs$ACR
acs$AGS
acs[(acs$AGS =3),]
acs[,(acs$AGS =3)]
acs[(acs$AGS =3)]
acs[acs$AGS =3]
acs[acs$AGS = 3]
x<-(acs$AGS = 3)
x
x<-as.logical(acs$AGS = 3)
x<-[acs$AGS = 3]
x<-[[acs$AGS = 3]]
X
x
str(acs)
acs <- read.csv("acs.csv", header=TRUE)
acs
str(acs)
acs$ACS = 3
str(acs)
View(acs)
acs[(acs$ACR = 3 & acs$AGS = 6),]
x <- acs[(acs$ACR = 3 & acs$AGS = 6),]
x <- acs[(acs$ACR == 3 & acs$AGS == 6),]
x
which(x)
x
x <- as.logical(acs[(acs$ACR == 3 & acs$AGS == 6),])
x <- as.logical(acs$ACR == 3 & acs$AGS == 6)
which(x)
install.packages("jpeg")
library("jpeg")
?jpeg
download.file(url="https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg",method="curl",destfile="jeff.jpg")
jpeg(file="jeff.jpg")
install.packages("cairo")
install.packages("Cairo")
library("Cairo")
jpeg(file="jeff.jpg")
?Cairo
jpeg(file="jeff.jpg",native="TRUE")
install.packages("libjpeg")
jpeg(file="jeff.jpg",native="TRUE")
blaa <- read.table("~/Downloads/f3b61f50f4d411e39d7b8bb95a472c8c.txt")
View(blaa)
View(blaa)
blaa <- read.table("~/Downloads/6d1e9ae0f4bf11e389c383b37159e730.txt")
View(blaa)
blaa <- read.table("~/Downloads/6430fe70f55311e394964baca0dc6e9e.txt")
View(blaa)
blaa <- read.table("~/Downloads/6d1e9ae0f4bf11e389c383b37159e730.txt")
View(blaa)
blaa <- read.table("~/Downloads/f3b61f50f4d411e39d7b8bb95a472c8c.txt")
install.packages("knitr")
library(knitr)
getwd()
setwd("RepData_PeerAssessment1/")
getwd()
amd <- read.csv("activity.csv", header=true)
amd <- read.csv("activity.csv", header=TRUE)
str(amd)
head(amd$date)
head(amd$interval)
head(amd$interval, n=20)
head(amd$interval, n=120)
head(amd$interval, n=220)
?as.date
?as.Date
amd$date <- as.Date(amd$date)
str(amd)
?histo
?hist
?sum
hist(amd, breaks=amd$date)
hist(amd, breaks="amd$date")
hist(amd$steps, breaks="amd$date")
hist(amd$steps)
hist(amd$steps ~ amd$date)
?qqplot
?qplot
library(ggplot2)
?qplot
qplot(amd$steps, data=amd)
qplot(amd$date, data=amd)
qplot(amd$date, amd$steps, data=amd)
qplot(amd$date, sum(amd$steps), data=amd)
qplot(date, sum(amd$steps), data=amd)
library(plyr)
sum_amd <- ddply(amd, "date", summarise, amdSum=sum(steps), amdMean=mean(steps), amdMedian=median(steps))
sum_amd
qplot(amd_sum)
qplot(amd_Sum)
qplot(sum_amd)
qplot(amd_Sum, c(amdMean, amdMedian), data=sum_amd)
qplot(amdSum, c(amdMean, amdMedian), data=sum_amd)
qplot(amdSum, c(amdMean, amdMedian), data=sum_amd, geom=c("histogram","smooth","smooth"))
qplot(amdSum, data=sum_amd)
qplot(amdSum, date, data=sum_amd)
qplot(date, amdSum, data=sum_amd)
?geom
qplot(date, amdSum, data=sum_amd, geom="bar")
g <- ggplot(sum_amd, aes(date, amdSum, amdMean, amdMedian))
print(g)
p <- g + geom_point()
print(p)
p <- g + geom_bar()
print(p)
p <- g + geom_histogram()
print(p)
?geom_bar
View(amd)
View(amd)
g <- ggplot(amd, aes(date))
p <- g + stat_bin()
print(p)
p <- g + stat_summary()
print(p)
g <- ggplot(amd, aes(date, steps))
p <- g + stat_summary()
print(p)
p <- g + geom_histogram()
print(p)
plot(sum_amd$Date, sum_amd$amdSum, type="b")
plot(sum_amd$date, sum_amd$amdSum, type="b")
?plot
plot(sum_amd$date, sum_amd$amdSum, type="h")
plot(sum_amd$date, sum_amd$amdSum, type="s")
sum_amd
plot(sum_amd$date, sum_amd$amdSum, type="c")
plot(sum_amd$date, sum_amd$amdSum, type="C")
plot(sum_amd$date, sum_amd$amdSum, type="o")
plot(sum_amd$date, sum_amd$amdSum, type="S")
plot(sum_amd$date, sum_amd$amdSum, type="h")
plot(sum_amd$date, sum_amd$amdSum, type="h")
with(sum_amd, plot(amdMean, type = "l", col="red")
plot(sum_amd$date, sum_amd$amdSum, type="h")
with(sum_amd, plot(amdMean, type = "l", col="red"))
plot(sum_amd$date, sum_amd$amdSum, type="h")
with(sum_amd, plot(date, amdMean, type = "l", col="red"))
plot(sum_amd$date, sum_amd$amdSum, type="h")
lines(sum_amd, plot(date, amdMean, type = "l", col="red"))
plot(sum_amd$date, sum_amd$amdSum, type="h")
lines(sum_amd$date, sum_amd$amdMean, col=red)
plot(sum_amd$date, sum_amd$amdSum, type="h")
lines(sum_amd$date, sum_amd$amdMean, col="red")
plot(sum_amd$date, sum_amd$amdSum, type="h")
lines(sum_amd$date, sum_amd$amdMean, col="red")
lines(sum_amd$date, sum_amd$amdMedian, col="green")
sum_amd
?median
sum_amd <- ddply(amd, "date", summarise, amdSum=sum(steps), amdMean=mean(steps, na.rm=TRUE), amdMedian=median(steps, na.rm=TRUE))
sum_amd
sum_amd <- ddply(amd, "date", summarise, amdSum=sum(steps), amdMean=mean(steps, na.rm = TRUE), amdMedian=median(steps, na.rm = TRUE))
sum_amd
mean_interval <- ddply(amd, "interval", summarise, intervallMean=mean(steps))
mean_interval
mean_interval <- ddply(amd, "interval", summarise, intervallMean=mean(steps, na.rm=TRUE))
mean_interval
plot(mean_interval$interval, mean_interval$intervallMean, type="l")
?max
max(mean_interval$intervallMean)
which.max(mean_interval$intervallMean)
mean_interval[which.max(mean_interval$intervallMean),]
plot(mean_interval$interval, mean_interval$intervallMean, type="l", xlab="Time interval", ylab="Mean amount of steps")
?is.na
sum(is.na(amd))
sum(is.na(amd$date))
sum(is.na(amd$steps))
sum(is.na(amd$interval))
?na
?na.approx
?na.approz
?cor
amd[is.na(amd$steps) == "TRUE", 1]
?ddply
View(sum_amd)
View(sum_amd)
amd[is.na(amd$steps) == "TRUE", 1] <- mean_interval$intervallMean
amd[is.na(amd$steps) == "TRUE", 1]
View(amd)
View(amd)
amd1 <- read.csv("activity.csv", header=TRUE)
amd1$date <- as.Date(amd1$date)
View(amd1)
?histogram
?histo
?hist
hist(amd1$steps)
hist(amd1$steps ~ date)
hist(amd$steps)
?weekdays
?tapply
tapply(amd1$steps, amd1$date)
tapply(amd1$steps, amd1$date, sum)
hist(tapply(amd1$steps, amd1$date, sum))
lines(tapply(amd1$steps, amd1$date, mean))
lines(tapply(amd1$steps, amd1$date, median))
amd1$date
tapply(amd1$steps, amd1$date, mean)
tapply(amd1$steps, amd1$date, median)
sum_amd
sum_amd <- ddply(amd, "date", summarise, amdSum=sum(steps), amdMean=mean(steps), amdMedian=median(steps))
sum_amd
hist(sum_amd$amdSum)
sum_amd$c(date, amdMean, amdMedian)
## Read the source data
amd <- read.csv("activity.csv", header=TRUE)
## Convert the dates to correct format
amd$date <- as.Date(amd$date)
## Summarise the data with ddply, calculate the sum of steps per day and median and mean per day
sum_amd <- ddply(amd, "date", summarise, amdSum=sum(steps), amdMean=mean(steps), amdMedian=median(steps))
## Make a histogram of total amount of steps taken per day
hist(sum_amd$amdSum)
## Print the sum, mean and median per day
sum_amd
?hist
## Read the source data
amd <- read.csv("activity.csv", header=TRUE)
## Convert the dates to correct format
amd$date <- as.Date(amd$date)
## Summarise the data with ddply, calculate the sum of steps per day and median and mean per day
sum_amd <- ddply(amd, "date", summarise, amdSum=sum(steps), amdMean=mean(steps), amdMedian=median(steps))
## Make a histogram of total amount of steps taken per day
hist(sum_amd$amdSum, xlab="Sum of steps taken", main="Total amount of steps taken per day")
## Print the sum, mean and median per day
sum_amd
## Coursera Reproducible Research course assignment 1
## This code requires plyr, ggplot2 packages
## Read the source data
amd <- read.csv("activity.csv", header=TRUE)
## Convert the dates to correct format
amd$date <- as.Date(amd$date)
## Summarise the data with ddply, calculate the sum of steps per day and median and mean per day
sum_amd <- ddply(amd, "date", summarise, amdSum=sum(steps), amdMean=mean(steps), amdMedian=median(steps))
## Make a histogram of total amount of steps taken per day
hist(sum_amd$amdSum, xlab="Sum of steps taken", main="Total amount of steps taken per day")
## Print the sum, mean and median per day
sum_amd
## Calculate the mean number of steps taken per time interval, across all days
mean_interval <- ddply(amd, "interval", summarise, intervallMean=mean(steps, na.rm=TRUE))
## Plot the mean number of steps taken per time interval
plot(mean_interval$interval, mean_interval$intervallMean, type="l", xlab="Time interval", ylab="Mean amount of steps")
## Print the interval where the maximum number of steps occur
mean_interval[which.max(mean_interval$intervallMean),]
## Calculate the amount rows with missing values
sum(is.na(amd))
## Replace the missing values with the correct interval mean
amd[is.na(amd$steps) == "TRUE", 1] <- mean_interval$intervallMean
## Summarise the data with ddply, calculate the sum of steps per day and median and mean per day
sum_amd_new <- ddply(amd, "date", summarise, amdSum=sum(steps), amdMean=mean(steps), amdMedian=median(steps))
## Make a histogram of total amount of steps taken per day
hist(sum_amd_new$amdSum)
## Print the sum, mean and median per day
sum_amd_new
## Summarise the data with ddply, calculate the sum of steps per day and median and mean per day
sum_amd_new <- ddply(amd, "date", summarise, amdSum=sum(steps), amdMean=mean(steps), amdMedian=median(steps))
## Make a histogram of total amount of steps taken per day
hist(sum_amd_new$amdSum, xlab="Sum of steps taken", main="Total amount of steps taken per day (missing values removed)")
## Print the sum, mean and median per day
sum_amd_new
?median
mean_interval
?weekday
?weekdays
weekdays(sum_amd)
weekdays(sum_amd$date)
language=en
language="en"
weekdays(sum_amd$date)
language
